<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ import namespace="EnvDTE80" #>

<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>

<#
	const string namespeaceName = "kova.api.Controllers";

	var host = this.Host as ITextTemplatingEngineHost;
	var serviceProvider = host as IServiceProvider;
	var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;

	var project = dte.Solution.FindProjectItem(host.TemplateFile).ContainingProject;
	var projectItems = project.ProjectItems;

	//var models = projectItems.Cast<EnvDTE.ProjectItem>().First(v=>v.Name == "Models");
	var kova = project.CodeModel.CodeElements.Cast<EnvDTE.CodeElement>().First(v => v.Name == "kova");
	var api = ((EnvDTE.CodeNamespace)kova).Members.Cast<EnvDTE.CodeElement>().First(v => v.Name == "api");
	var models = ((EnvDTE.CodeNamespace)api).Members.Cast<EnvDTE.CodeElement>().First(v => v.Name == "Models");

	var modelClasses = ((EnvDTE.CodeNamespace)models).Members;
	var organizationModelClasses = modelClasses.Cast<EnvDTE.CodeElement>().Where(v => v.Name.StartsWith("TOrganization"));
#>


#region Autogenerated by T4 text template

using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using kova.api.Models;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
using Microsoft.EntityFrameworkCore;
using kova.api.Authentication;

namespace <#= namespeaceName #> 
{
<# 
 foreach(EnvDTE.CodeElement modelClass in organizationModelClasses)
 {
	var controllerGenerator = new ControllerGeneratorHelper(modelClass);
 #>
 <#= controllerGenerator.TransformText() #>
 <#
 }
 #>
 
}


#endregion

<#+
	public class ControllerGeneratorHelper : TextTransformation
	{
		public EnvDTE.CodeElement ModelClass { get; private set; }

		public string Name 
		{
			get { return ModelClass.Name.Substring("TOrganization".Length); }
		}
		public string ControllerName
		{
			get { return Name + "Controller"; }
		}

		public string ClassName 
		{
			get { return ModelClass.Name; }
		}

		public ControllerGeneratorHelper(EnvDTE.CodeElement modelClass) 
		{
			ModelClass = modelClass;
		}

		public override string TransformText()
		{
#>
	[Authorize]
    [Route("api/[controller]")]
	public partial class <#= ControllerName #> : KovaModelControllerBase<<#= ClassName #>>
	{
		public <#= ControllerName #>(kovaContext context) : base(context)
		{
            
		}

		// GET api/<#= Name #>
        [HttpGet]
        public IQueryable<<#= ClassName #>> Get()
        {
            return context.<#= ClassName #>
                .Where(AccessCriteria);
        }

		
        // GET api/<#= Name #>/00000000-0000-0000-0000-000000000000
        [HttpGet("{primKey}")]
        public <#= ClassName #> Get(Guid primKey)
        {
            return context.<#= ClassName #>
				.Where(AccessCriteria)
                .FirstOrDefault(v => v.PrimKey == primKey);
        }
	}
<#+
			return this.GenerationEnvironment.ToString();
		}
	}
#>


